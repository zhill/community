openapi: 3.0.0
info:
  title: Harbor Scanner Adapter API
  description: |
    ## Overview

    The API that has to be implemented in order to plug an image scanner in [Harbor](https://goharbor.io) registry.

    The [/health](#default/checkHealth) and [/metadata](#default/getMetadata) operations needs to be provided to allow
    Harbor administrators to configure and register scanners along with their capabilities.

    The [/scan](#default/submitScan) and [/scan/{scan_request_id}](#default/getScanById) operations do the actual
    scanning and provide ScanResult which can be displayed in the Harbor web console.

    The main assumption is that the scanning is asynchronous. The [/scan](#default/submitScan)
    should just trigger scan of a given artifact and return immediatly. The unique identifier of the ScanRequest is used
    to fetch the corresponding ScanResult. Image scanning is typically a lengthy process so Harbor will poll the
    [/scan/{scan_request_id}](#default/getScanById) operation periodically until it returns ScanResult with the `status`
    property equal to `done` or `error`.

    ## TODOs
    - [ ] Define semantics of scanID and idempotence of the API endpoints. Can we replace scanID with digest?
          Clarify how the identifiers are used by Harbor.
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0.0"
servers:
  - url: /
security:
  - BasicAuth: []
  - ApiKeyAuth: []
  - BearerAuth: []
paths:
  /health:
    get:
      summary: Check health
      description: |
        Used to check health of the Scanner Adapter. It can be invoked by Harbor to test network
        connectivity and availability of the scanner.
      operationId: checkHealth
      responses:
        200:
          description: API server is healthy
      security: []
  /metadata:
    get:
      summary: Get scanner's metadata
      description: |
        Used to fetch scanner's metadata and capabilities. The operation is invoked by Harbor to build an index of
        scanners capable of scanning a given type of artifacts and making sure that the results can be displayed
        in Harbor web console.
      operationId: getMetadata
      responses:
        200:
          description: scanner's metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScannerMetadata'
  /scan:
    post:
      summary: Trigger scan of a given artifact
      description: |
        A non-blocking operation which triggers the artifact scan and returns immediately.
      operationId: submitScan
      requestBody:
        description: |
          Contains data required to pull the given artifact and save it for scanning in the file system or any other
          location accessible to the scanner.

          The `registry_url` bypassed the Harbor's proxy and allows pulling an artifact even if it's not compliant with
          the configured policies in the Harbor's web console. It is still subject to the Harbor's authorization though.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanRequest'
      responses:
        202:
          description: Scan triggered successfully
        400:
          description: Received invalid JSON or the wrong type of JSON values
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: Received invalid fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /scan/{scan_request_id}:
    get:
      summary: Get result of artifact scan
      description: |
        Get the ScanResult for the given ScanRequest.

        Harbor will periodically poll this operation and check `$response.body.status` until its value equals `done`
        or `error`.
      operationId: getScanById
      parameters:
        - name: scan_request_id
          in: path
          description: The identifier of the corresponding ScanRequest
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: Accept
          in: header
          schema:
            type: string
          required: true
          example: "application/vnd.harbor.scanner.result.vulnerability.v1+json"
      responses:
        200:
          description: scan results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanResult'
        404:
          description: not found
components:
  schemas:
    ScannerMetadata:
      required:
        - name
        - vendor
        - version
        - capabilities
      type: object
      properties:
        name:
          type: string
          description: The name of the scanner.
          example: Microscanner
        vendor:
          type: string
          description: The name of the scanner's provider.
          example: Aqua Security
        version:
          type: string
          description: The version of the scanner.
          example: 3.0.5
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/ScannerCapability'
      description: |
        Represents scanner's metadata which allow Harbor to lookup a scanner capable
        of scanning a given Artifact stored in its registry and making sure that it
        can interpret a returned result.
    ScannerCapability:
      description: |
        Capability consists of the set of recognized artifact MIME types and the set of scanner report MIME types.
        For example, a scanner capable of analyzing Docker images and producing a vulnerabilities report recognizable
        by Harbor web console might be represented with the following capability:
        - artifact MIME types:
          - `application/vnd.oci.image.manifest.v1+json`
          - `application/vnd.docker.distribution.manifest.v2+json`
        - report MIME types:
          - `application/vnd.harbor.scanner.report.vulnerability.v1+json`
      required:
        - artifact_mime_types
        - report_mime_types
      type: object
      properties:
        artifact_mime_types:
          type: array
          items:
            type: string
          description: The set of MIME types of the artifacts supported by the scanner.
          example:
            - "application/vnd.oci.image.manifest.v1+json"
            - "application/vnd.docker.distribution.manifest.v2+json"
        report_mime_types:
          type: array
          items:
            type: string
          description: |
            The set of MIME types of reports generated by the scanner.
          example:
            - "application/vnd.harbor.scanner.result.vulnerability.v1+json"
    ScanRequest:
      required:
        - id
        - registry_url
        - registry_authorization
        - artifact_repository
        - artifact_digest
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of this request.
        registry_url:
          type: string
          description: A base URL or the Docker Registry v2 API exposed by Harbor.
          format: url
          example: https://harbor-harbor-registry:5000
        registry_authorization:
          type: string
          description: |
            An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API.
          example: "Bearer: JWTTOKENGOESHERE"
        artifact_repository:
          type: string
          description: A name of the Harbor repository containing the artifact.
          example: library/oracle/nosql
        artifact_digest:
          type: string
          description: The artifact's digest, consisting of an algorithm and hex portion.
          example: "sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b"
    ScanResult:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          example: done
          enum:
            - pending
            - done
            - error
        generated_at:
          type: string
          format: 'date-time'
        harbor_vulnerability_report:
          $ref: '#/components/schemas/HarborVulnerabilityReport'
        error:
          $ref: '#/components/schemas/Error'
      description: |
        Represents scan result. Since the scanning is done asynchronously, the response
        might be in the `pending` state. In case of failure the status equals `error` and the
        corresponding `error` property contains the detailed message describing the problem.
        If everything is fine and the status equals `done` the `harbor_vulnerability_report` is populated.
    HarborVulnerabilityReport:
      type: object
      properties:
        severity:
          $ref: "#/components/schemas/Severity"
        vulnerabilities:
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityItem'
    VulnerabilityItem:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the vulnerability.
          example: CVE-2017-8283
        package:
          type: string
          description: |
            An operating system or software dependency package containing the vulnerability.
          example: dpkg
        version:
          type: string
          description: |
            The version of the package containing the vulnerability.
          example: 1.17.27
        fix_version:
          type: string
          description: |
            The version of the package containing the fix if available.
          example: 1.18.0
        severity:
          $ref: "#/components/schemas/Severity"
        description:
          type: string
          description: |
            The detailed description of the vulnerability.
          example: |
            dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program
            and does not offer a protection mechanism for blank-indented diff hunks, which
            allows remote attackers to conduct directory traversal attacks via a crafted
            Debian source package, as demonstrated by using of dpkg-source on NetBSD.
        links:
          type: array
          items:
            type: string
            format: uri
          description: |
            The list of link to the upstream database with the full description of the vulnerability.
          format: uri
          example:
            - https://security-tracker.debian.org/tracker/CVE-2017-8283
    Severity:
      type: string
      description: |
        A standard scale for measuring the severity of a vulnerability.

        * `Unknown` - either a security problem that has not been assigned to a priority yet or a priority that the
          scanner did not recognize.
        * `Negligible` - technically a security problem, but is only theoretical in nature, requires a very special
          situation, has almost no install base, or does no real damage.
        * `Low` - a security problem, but is hard to exploit due to environment, requires a user-assisted attack,
          a small install base, or does very little damage.
        * `Medium` - a real security problem, and is exploitable for many people. Includes network daemon denial of
          service attacks, cross-site scripting, and gaining user privileges.
        * `High` - a real problem, exploitable for many people in a default installation. Includes serious remote denial
          of service, local root privilege escalations, or data loss.
        * `Critical` - a world-burning problem, exploitable for nearly all people in a default installation. Includes
          remote root privilege escalations, or massive data loss.
      example: Low
      enum:
        - Unknown
        - Negligible
        - Low
        - Medium
        - High
        - Critical
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Problem parsing JSON"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      name: X-ScannerAdapter-API-Key
      in: header
